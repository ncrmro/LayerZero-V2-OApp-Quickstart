name: Deploy LayerZero OApp to Local Networks

on:
  push:
    branches: [ main, copilot/fix-1 ]
  pull_request:
    branches: [ main ]

jobs:
  deploy-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Set up environment variables
      run: |
        echo "PRIVATE_KEY=0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80" >> $GITHUB_ENV
        
    - name: Compile contracts with Hardhat
      run: npx hardhat compile
      env:
        PRIVATE_KEY: ${{ env.PRIVATE_KEY }}
        
    - name: Run tests to verify the OApp works
      run: npx hardhat test
      env:
        PRIVATE_KEY: ${{ env.PRIVATE_KEY }}
        
    - name: Start first Hardhat network (Port 8545)
      run: |
        echo "Starting Hardhat network on port 8545..."
        npx hardhat node --port 8545 > hardhat1.log 2>&1 &
        HARDHAT_PID_1=$!
        echo "HARDHAT_PID_1=$HARDHAT_PID_1" >> $GITHUB_ENV
        echo "Network 1 PID: $HARDHAT_PID_1"
        sleep 5
      env:
        PRIVATE_KEY: ${{ env.PRIVATE_KEY }}
        
    - name: Start second Hardhat network (Port 8546)
      run: |
        echo "Starting Hardhat network on port 8546..."
        npx hardhat node --port 8546 > hardhat2.log 2>&1 &
        HARDHAT_PID_2=$!
        echo "HARDHAT_PID_2=$HARDHAT_PID_2" >> $GITHUB_ENV
        echo "Network 2 PID: $HARDHAT_PID_2"
        sleep 5
      env:
        PRIVATE_KEY: ${{ env.PRIVATE_KEY }}
        
    - name: Wait for networks to be ready
      run: |
        echo "Waiting for networks to start..."
        sleep 10
        
        echo "Checking network 1 availability..."
        for i in {1..10}; do
          if curl -s -X POST -H "Content-Type: application/json" \
            --data '{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":1}' \
            http://127.0.0.1:8545 > /dev/null; then
            echo "Network 1 is ready!"
            break
          fi
          echo "Waiting for network 1... attempt $i"
          sleep 2
        done
        
        echo "Checking network 2 availability..."
        for i in {1..10}; do
          if curl -s -X POST -H "Content-Type: application/json" \
            --data '{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":1}' \
            http://127.0.0.1:8546 > /dev/null; then
            echo "Network 2 is ready!"
            break
          fi
          echo "Waiting for network 2... attempt $i"
          sleep 2
        done
        
        echo "Both networks should be ready!"
        
    - name: Deploy to Local Network 1
      run: |
        echo "Deploying MyOApp to local network 1..."
        npx hardhat deploy --network hardhat-local-1 --tags MyOApp
      env:
        PRIVATE_KEY: ${{ env.PRIVATE_KEY }}
        
    - name: Deploy to Local Network 2
      run: |
        echo "Deploying MyOApp to local network 2..."
        npx hardhat deploy --network hardhat-local-2 --tags MyOApp
      env:
        PRIVATE_KEY: ${{ env.PRIVATE_KEY }}
        
    - name: Show deployment results
      run: |
        echo "=== Deployment Summary ==="
        echo "âœ… LayerZero V2 OApp quickstart successfully deployed to two local Hardhat networks"
        echo "ðŸ“¦ Network 1: http://127.0.0.1:8545"
        echo "ðŸ“¦ Network 2: http://127.0.0.1:8546"
        echo ""
        echo "Deployments folder content:"
        ls -la deployments/ || echo "No deployments folder found"
        
        echo ""
        echo "Network 1 logs (last 20 lines):"
        tail -20 hardhat1.log || echo "No network 1 logs"
        
        echo ""
        echo "Network 2 logs (last 20 lines):"
        tail -20 hardhat2.log || echo "No network 2 logs"
        
    - name: Clean up
      if: always()
      run: |
        echo "Cleaning up processes..."
        if [ ! -z "$HARDHAT_PID_1" ]; then
          kill $HARDHAT_PID_1 2>/dev/null || true
        fi
        if [ ! -z "$HARDHAT_PID_2" ]; then
          kill $HARDHAT_PID_2 2>/dev/null || true
        fi
        pkill -f "hardhat node" || true
        echo "Cleanup completed"